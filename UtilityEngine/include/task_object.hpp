/**
* @file task_object.hpp
*
* @author Hourui (liquidmonkey)
*/
#ifndef __TASK_OBJECT_HPP__
#define __TASK_OBJECT_HPP__

#include <atomic>
#include <cstdint>
#include <mutex>

namespace Utility
{
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace task
{
////////////////////////////////////////////////////////////////////////////////////////////////////
class object_iface
{
public:
	object_iface(void);
	~object_iface(void) = default;

	object_iface(const object_iface&) = delete;
	object_iface& operator=(const object_iface&) = delete;

	std::uint32_t compkey(void);
	virtual void handle_error(std::uint32_t compkey) = 0;
	virtual void do_close(void* ptr) = 0;
protected:
	std::atomic<std::uint32_t> m_compkey;
};
////////////////////////////////////////////////////////////////////////////////////////////////////
template<class message_wrap_t>
class object
{

};
////////////////////////////////////////////////////////////////////////////////////////////////////
}//namespace task
////////////////////////////////////////////////////////////////////////////////////////////////////
}//namespace Utility 
#endif //__TASK_OBJECT_HPP__